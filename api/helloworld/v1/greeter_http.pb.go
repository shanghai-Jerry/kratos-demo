// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v1.0.0
// - protoc             v4.25.3
// source: helloworld/v1/greeter.proto

package v1

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	http "github.com/shanghai-Jerry/krato-demo/transport/http"
)

// This is a compile-time assertion to ensure that this generated file
var _ = new(context.Context)
var _ = gin.Default

const _ = http.SupportPackageIsVersion1

const OperationGreeterSayHello = "/helloworld.v1.Greeter/SayHello"

type GreeterHTTPServer interface {
	// SayHello Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
}

func RegisterGreeterHTTPServer(r *gin.RouterGroup, srv GreeterHTTPServer) {
	r.GET("/helloworld/{name}", _Greeter_SayHello0_HTTP_Handler(srv))
}

func _Greeter_SayHello0_HTTP_Handler(srv GreeterHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		var in HelloRequest
		if err := ctx.BindQuery(&in); err != nil {
			ctx.AbortWithError(400, err)
			return
		}
		if err := ctx.BindQuery(&in); err != nil {
			ctx.AbortWithError(400, err)
			return
		}
		out, err := srv.SayHello(ctx, &in)
		if err != nil {
			ctx.AbortWithError(500, err)
			return
		}
		ctx.JSON(200, out)
	}
}

type GreeterHTTPClient interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...http.CallOption) (rsp *HelloReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) SayHello(ctx context.Context, in *HelloRequest, opts ...http.CallOption) (*HelloReply, error) {
	var out HelloReply
	pattern := "/helloworld/{name}"
	path := pattern
	opts = append(opts, http.Operation(OperationGreeterSayHello))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
